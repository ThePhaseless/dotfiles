#!/usr/bin/zsh
GITHUB_USERNAME="ThePhaseless"

export PATH=$HOME/.local/bin:$PATH
export EDITOR=nano # Don't judge

if command -v code &>/dev/null; then
  export EDITOR="code --wait"
fi

# Functions
init_chezmoi(){
  if command -v chezmoi &>/dev/null && [ -d $HOME/.local/share/chezmoi ]; then
    chezmoi update
  else
    (cd $HOME && sh -c "$(curl -fsLS get.chezmoi.io/lb)" -- init --apply $GITHUB_USERNAME)
  fi
}

init_antidote(){
  if [ ! -f ~/.antidote/antidote.zsh ]; then
    update_repo "https://github.com/mattmc3/antidote.git"
  fi
  source "$HOME/.antidote/antidote.zsh"
  antidote load
}

init_tmux(){
  if [ -z "$TERM_PROGRAM" ] && [ -z "$STY" ]; then # If not in VS Code/Screen
    run_tmux
  fi
}

update_repo() {
    local repo_url=$1
    local output_path=$2

    # Extract repo name
    local repo_name=$(basename "$1" .git)
    repo_name=${repo_name#.}

    # Set default output path
    if [ -z "$output_path" ]; then
        output_path=$HOME/.${repo_name}
    fi

    # Check if repo already exists
    if [ -d "$output_path" ]; then
        git -C "$output_path" pull
    else
        # Clone repo
        git clone --depth=1 "$repo_url" "$output_path"
    fi
}

run_tmux() {
    # Check if Tmux is installed
    if command -v tmux &>/dev/null; then
        update_repo "https://github.com/tmux-plugins/tpm" "$HOME/.tmux/plugins/tpm"
        # Run tmux
        tmux attach || tmux new
        exit
    else
        if command -v sudo &>/dev/null; then
            sudo apt install tmux -y --no-install-recommends --no-install-suggests
            run_tmux
        else
            echo "Please install tmux"
        fi
    fi
}

bind_keys() {
    bindkey '^I' menu-select                                          # TAB
    bindkey -M menuselect '^I' menu-complete                          # TAB
    bindkey "${terminfo[kcbt]}" menu-select                           # shift-tab
    bindkey -M menuselect "${terminfo[kcbt]}" reverse-menu-complete   # shift-tab
    bindkey -M menuselect '^[[D' .backward-char '^[OD' .backward-char # arrow left
    bindkey -M menuselect '^[[C' .forward-char '^[OC' .forward-char   # arrow right
}

activate_venv() {
  if [[ -f "$HOME/.venv/bin/activate" ]]; then
    source "$HOME/.venv/bin/activate"
  fi
}

init_chezmoi && init_tmux && init_antidote && activate_venv
error_occurred=$?

if [[ "$error_occurred" -eq 0  ]]; then
  clear
else
  echo "An error occurred during initialization. Clearing antidote cache... Please check the output above."
  rm ~/.zsh_plugins.zsh
fi


# Config
bind_keys

# Completion
smartcache comp gh completion -s zsh 2>/dev/null
smartcache comp chezmoi completion zsh 2>/dev/null
smartcache comp uv generate-shell-completion zsh 2>/dev/null
smartcache comp uvx --generate-shell-completion zsh 2>/dev/null
smartcache comp ng completion script zsh 2>/dev/null

if [[ "$TERM_PROGRAM" == "tmux" ]]; then # If in TMUX
  reset
  if [ "$(tmux display-message -p '#{window_index}')" = "1" ] && [ -f /var/run/motd.dynamic ]; then
    cat /var/run/motd.dynamic
  fi
fi

if [[ "$error_occurred" -eq 0 ]]; then
  clear
else
  echo "An error occurred during initialization. Please check the output above."
fi
