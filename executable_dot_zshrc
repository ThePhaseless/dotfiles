#!/usr/bin/zsh
GITHUB_USERNAME="ThePhaseless"

export PATH=$HOME/.local/bin:$PATH

if command -v zed &>/dev/null; then
  export EDITOR="zed --wait"
elif command -v code &>/dev/null; then
  export EDITOR="code --wait"
else
  export EDITOR="nano"
fi

if ! [ -z "$INTELLIJ_ENVIRONMENT_READER" ]; then
  return 0
fi

# Functions
init_chezmoi() {
  if command -v chezmoi &>/dev/null && [ -d $HOME/.local/share/chezmoi ]; then
    chezmoi update
  else
    (cd $HOME && sh -c "$(curl -fsLS get.chezmoi.io/lb)" -- init --apply $GITHUB_USERNAME)
  fi
}

init_antidote() {
  if [ ! -f "$HOME/.antidote/antidote.zsh" ]; then
    update_repo "https://github.com/mattmc3/antidote.git"
  fi
  source "$HOME/.antidote/antidote.zsh"
  antidote load
}

init_tmux() {
  if [ -z "$TERM_PROGRAM" ] && [ -z "$STY" ] && [ -z "$VSCODE_INJECTION"]; then # If not in VS Code/Screen
    run_tmux
  fi
}

init_locale() {
  # Check if en_US.utf-8 is generated
  if ! locale -a | grep -qE "en_US\.(utf|UTF)-?8"; then
    if ! locale-gen en_US.UTF-8; then
      echo "Please run locale-gen en_US.UTF-8 to generate the missing locale"
    fi
  fi
  # Set locale if not set to en_US.UTF-8
  if ! echo "$LANG" | grep -qE "en_US\.(utf|UTF)-?8"; then
    export LANG="en_US.UTF-8"
  fi
}

update_repo() {
  local repo_url=$1
  local output_path=$2

  # Extract repo name
  local repo_name=$(basename "$1" .git)
  repo_name=${repo_name#.}

  # Set default output path
  if [ -z "$output_path" ]; then
    output_path=$HOME/.${repo_name}
  fi

  # Check if repo already exists
  if [ -d "$output_path" ]; then
    git -qC "$output_path" pull
  else
    # Clone repo
    git clone --depth=1 "$repo_url" "$output_path"
  fi
}

run_tmux() {
  # Check if Tmux is installed
  if command -v tmux &>/dev/null; then
    # Check if Tmux Plugin Manager is installed
    if [ ! -d "$HOME/.tmux/plugins/tpm" ]; then
      # Install Tmux Plugin Manager
      update_repo "https://github.com/tmux-plugins/tpm" "$HOME/.tmux/plugins/tpm"
      $HOME/.tmux/plugins/tpm/bin/install_plugins
    fi
    # Run tmux
    tmux attach || tmux new
    exit
  fi
}

bind_keys() {
  bindkey '^I' menu-select                                          # TAB
  bindkey -M menuselect '^I' menu-complete                          # TAB
  bindkey "${terminfo[kcbt]}" menu-select                           # shift-tab
  bindkey -M menuselect "${terminfo[kcbt]}" reverse-menu-complete   # shift-tab
  bindkey -M menuselect '^[[D' .backward-char '^[OD' .backward-char # arrow left
  bindkey -M menuselect '^[[C' .forward-char '^[OC' .forward-char   # arrow right
}

activate_venv() {
  if [[ -f "$HOME/.venv/bin/activate" ]]; then
    VIRTUAL_ENV_DISABLE_PROMPT=1 source "$HOME/.venv/bin/activate"
  fi
}

source_profile() {
  if [ -f "$HOME/.profile" ]; then
    source "$HOME/.profile"
  fi
}

init_locale &&
  init_chezmoi &&
  init_tmux &&
  init_antidote &&
  activate_venv &&
  source_profile

error_occurred=$?

if [[ $error_occurred -eq 0 ]]; then
  clear
else
  echo "An error occurred during initialization. Clearing antidote cache... Please check the output above."
  rm "$HOME/.zsh_plugins.zsh"
fi

# Config
bind_keys

# Completion
smartcache comp gh completion -s zsh 2>/dev/null
smartcache comp chezmoi completion zsh 2>/dev/null
smartcache comp uv generate-shell-completion zsh 2>/dev/null
smartcache comp uvx --generate-shell-completion zsh 2>/dev/null
smartcache comp ng completion script zsh 2>/dev/null
smartcache eval zoxide init zsh --cmd cd

if [[ $error_occurred -eq 0 ]]; then
  clear
else
  echo "An error occurred during initialization. Please check the output above."
fi

if [ -f /var/run/motd.dynamic ]; then
  if [[ $TERM_PROGRAM == "tmux" ]]; then # If in TMUX
    reset
    if [ "$(tmux display-message -p '#{window_index}')" = "1" ]; then
      cat /var/run/motd.dynamic
    fi
  else
    cat /var/run/motd.dynamic
  fi
fi
